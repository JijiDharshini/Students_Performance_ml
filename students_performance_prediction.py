# -*- coding: utf-8 -*-
"""Students_Performance_Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dSxZefBCF60i1P0BBExXrOTmhRX6k3th
"""

from google.colab import files
uploaded = files.upload()

import zipfile

# Replace with the actual filename if different
zip_path = "/content/yourfilename.zip"  # update this

# Auto-detect the uploaded ZIP file
import os
zip_path = next((f for f in os.listdir() if f.endswith('.zip')), None)

# Extract the ZIP file
if zip_path:
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall()
        print("✅ ZIP file extracted successfully!")
else:
    print("❌ No ZIP file found.")

import os

# List all extracted files to find the CSV name
for f in os.listdir():
    if f.endswith('.csv'):
        print("Found CSV file:", f)

df = pd.read_csv('StudentsPerformance.csv')  # or use the printed name
df.head()

# Check for missing values
print(df.isnull().sum())

# Encode categorical columns
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df['gender'] = le.fit_transform(df['gender'])
df['race/ethnicity'] = le.fit_transform(df['race/ethnicity'])
df['parental level of education'] = le.fit_transform(df['parental level of education'])
df['lunch'] = le.fit_transform(df['lunch'])
df['test preparation course'] = le.fit_transform(df['test preparation course'])

import seaborn as sns
import matplotlib.pyplot as plt

# Correlation heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Features and target (predicting math score)
X = df.drop(['math score'], axis=1)
y = df['math score']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Training
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

# R-squared Score
print("R² Score:", r2_score(y_test, y_pred))

# Mean Squared Error
print("MSE:", mean_squared_error(y_test, y_pred))

# Predict math score for a custom student
sample_student = X_test.iloc[0]
predicted_score = model.predict([sample_student])
print("Predicted Math Score:", predicted_score[0])